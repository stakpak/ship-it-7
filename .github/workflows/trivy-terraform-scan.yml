name: Trivy Terraform Security Scan

on:
  workflow_dispatch:
  pull_request:
    branches: ['*']
  push:
    branches: [main]

permissions:
  contents: read
  security-events: write
  pull-requests: write
  actions: read

jobs:
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        continue-on-error: true
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: '1'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-terraform'

      - name: Analyze Trivy findings with Stakpak Agent
        uses: stakpak/agent@v1.0.10
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          api_key: ${{ secrets.STAKPAK_API_KEY }}
          prompt: "Analyze the Trivy security scan results in trivy-results.sarif and provide a risk assessment. For each vulnerability found: 1) Calculate risk score = Impact √ó Likelihood (scale 1-5 each), 2) Rank vulnerabilities by risk score (highest first), 3) Provide actionable remediation recommendations, 4) Assess business impact and urgency. Consider Impact: Data exposure, system compromise, compliance violations. Likelihood: Exploitability, attack vectors, current threat landscape. Context: This is Terraform infrastructure code for cloud resources. Output format: Risk Assessment Summary with High Risk Vulnerabilities (Score 15+), Medium Risk Vulnerabilities (Score 8-14), Low Risk Vulnerabilities (Score 1-7), and Prioritized Action Plan. Save the analysis to trivy-risk-assessment.md"
          max_steps: 15
          verbose: false

      - name: Generate scan summary for PR comment
        if: github.event_name == 'pull_request'
        run: |
          if [[ -f trivy-results.sarif ]]; then
            # Extract summary information from SARIF
            CRITICAL=$(jq '[.runs[].results[] | select(.level == "error")] | length' trivy-results.sarif 2>/dev/null || echo "0")
            HIGH=$(jq '[.runs[].results[] | select(.level == "warning")] | length' trivy-results.sarif 2>/dev/null || echo "0")
            MEDIUM=$(jq '[.runs[].results[] | select(.level == "note")] | length' trivy-results.sarif 2>/dev/null || echo "0")
            TOTAL=$(jq '[.runs[].results[]] | length' trivy-results.sarif 2>/dev/null || echo "0")
            
            echo "CRITICAL_COUNT=$CRITICAL" >> $GITHUB_ENV
            echo "HIGH_COUNT=$HIGH" >> $GITHUB_ENV
            echo "MEDIUM_COUNT=$MEDIUM" >> $GITHUB_ENV
            echo "TOTAL_COUNT=$TOTAL" >> $GITHUB_ENV
          else
            echo "CRITICAL_COUNT=0" >> $GITHUB_ENV
            echo "HIGH_COUNT=0" >> $GITHUB_ENV
            echo "MEDIUM_COUNT=0" >> $GITHUB_ENV
            echo "TOTAL_COUNT=0" >> $GITHUB_ENV
          fi

      - name: Comment PR with scan results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const critical = process.env.CRITICAL_COUNT;
            const high = process.env.HIGH_COUNT;
            const medium = process.env.MEDIUM_COUNT;
            const total = process.env.TOTAL_COUNT;
            
            const criticalEmoji = critical > 0 ? 'üî¥' : '‚úÖ';
            const highEmoji = high > 0 ? 'üü†' : '‚úÖ';
            const mediumEmoji = medium > 0 ? 'üü°' : '‚úÖ';
            
            const body = `## üõ°Ô∏è Trivy Terraform Security Scan Results
            
            | Severity | Count | Status |
            |----------|-------|--------|
            | Critical | ${critical} | ${criticalEmoji} |
            | High | ${high} | ${highEmoji} |
            | Medium | ${medium} | ${mediumEmoji} |
            | **Total** | **${total}** | ${total > 0 ? '‚ö†Ô∏è' : '‚úÖ'} |
            
            ${critical > 0 || high > 0 ? 
              '‚ö†Ô∏è **Action Required**: Critical or High severity vulnerabilities found. Please review the Security tab for detailed findings.' : 
              '‚úÖ **All Clear**: No critical or high severity vulnerabilities detected.'}
            
            üìä View detailed results in the [Security tab](${context.payload.repository.html_url}/security/code-scanning)
            
            ---
            *Scan performed on: ${new Date().toISOString()}*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Fail workflow on HIGH or CRITICAL vulnerabilities
        if: always()
        run: |
          if [[ -f trivy-results.sarif ]]; then
            CRITICAL=$(jq '[.runs[].results[] | select(.level == "error")] | length' trivy-results.sarif 2>/dev/null || echo "0")
            HIGH=$(jq '[.runs[].results[] | select(.level == "warning")] | length' trivy-results.sarif 2>/dev/null || echo "0")
            
            if [[ $CRITICAL -gt 0 || $HIGH -gt 0 ]]; then
              echo "‚ùå Security scan failed: Found $CRITICAL critical and $HIGH high severity vulnerabilities"
              echo "Please review the findings in the Security tab and address the issues before proceeding."
              exit 1
            else
              echo "‚úÖ Security scan passed: No critical or high severity vulnerabilities found"
            fi
          else
            echo "‚ö†Ô∏è Warning: SARIF file not found, treating as scan failure"
            exit 1
          fi